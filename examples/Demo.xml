<?xml version="1.0" encoding="utf-8"?>
<manialink version="1">
<frame posn="0 90" id="Frame_Global">
  <format textemboss="1" textsize="2" />
  <frame posn="0 -5 10" id="Frame_Header">
    <frame posn="0 0 -1">
      <quad posn="0 10" sizen="320 10" halign="center" bgcolor="000" />
      <quad posn="0 10 -1" sizen="320 20 -1" halign="center" bgcolor="222" />
      <quad posn="-130 0" sizen="30 10" bgcolor="722" bgcolorfocus="922" scriptevents="1" class="Button_Menu" id="Home" />
      <quad posn="-100 0" sizen="30 10" bgcolor="272" bgcolorfocus="292" scriptevents="1" class="Button_Menu" id="Animations" />
      <quad posn="-70 0" sizen="30 10" bgcolor="227" bgcolorfocus="229" scriptevents="1" class="Button_Menu" id="Tooltip" />
      <quad posn="-40 0" sizen="30 10" bgcolor="772" bgcolorfocus="992" scriptevents="1" class="Button_Menu" id="Draggable" />
    </frame>
    <frame posn="0 -5 0">
      <label posn="-115 0" sizen="28 10" halign="center" valign="center2" text="Home" />
      <label posn="-85 0" sizen="28 10" halign="center" valign="center2" text="Animation" />
      <label posn="-55 0" sizen="28 10" halign="center" valign="center2" text="Tooltip" />
      <label posn="-25 0" sizen="28 10" halign="center" valign="center2" text="Draggable" />
      <label posn="155 0" sizen="100 10" halign="right" valign="center2" style="TextRaceMessageBig" textsize="6" text="Manialink Library" />
    </frame>
  </frame>
  <frame posn="0 0 0" id="Frame_Animated">
    <frame class="Section" id="Home">
      <frame posn="0 -90" id="Frame_Content">
        <frame posn="0 0 -1">
          <quad sizen="320 180" halign="center" valign="center" bgcolor="722" id="Quad_BgHome" />
          <quad sizen="200 100" halign="center" valign="center" bgcolor="aaa" />
        </frame>
        <frame posn="0 0 0">
          <label posn="0 30" sizen="190 10" halign="center" valign="center2" style="TextRaceMessageBig" text="ManiaLink Library" />
          <label posn="0 15" halign="center" textsize="4" text="Get on GitHub" />
          <label posn="-25 5" halign="center" style="CardButtonMediumL" text="For Manialink" scriptevents="1" id="Button_GetOnGitHub_Manialink" />
          <label posn="25 5" halign="center" style="CardButtonMediumL" text="For game modes" scriptevents="1" id="Button_GetOnGitHub_GameMode" />
          <label posn="0 -15" halign="center" style="CardButtonMediumXL" text="Documentation" scriptevents="1" id="Button_Documentation" />
          <label posn="0 -25" halign="center" style="CardButtonMediumXL" text="Bookmark" scriptevents="1" id="Button_Bookmark" />
          <!--<frame posn="60 0"><include url="http://maniahome.maniaplanet.com/add/?url=librarymanialink"/></frame>-->
        </frame>
      </frame>
    </frame>
    <frame posn="320 0" class="Section" id="Animations">
      <frame posn="0 -90" id="Frame_Content">
        <frame posn="0 0 -1">
          <quad sizen="320 180" halign="center" valign="center" bgcolor="272" scriptevents="1" id="Quad_BgAnimations" />
          <quad posn="0 -90 3" sizen="320 16" halign="center" valign="bottom" bgcolor="222" scriptevents="1" />
        </frame>
        <frame posn="0 0 0">
          <quad sizen="20 20" bgcolor="fff" halign="center" valign="center" id="Quad_DemoAnimation" />
          <label posn="0 -70" halign="center" valign="bottom" text="Click somewhere on the screen to animate the quad." />
          <frame posn="-160 -90 4" id="Frame_AnimationControls">
            <frame posn="0 12">
              <label posn="20 0" sizen="30 6" halign="center" valign="center2" text="Position" />
              <label posn="50 0" sizen="30 6" halign="center" valign="center2" text="Size" />
              <label posn="80 0" sizen="30 6" halign="center" valign="center2" text="Scale" />
              <label posn="110 0" sizen="30 6" halign="center" valign="center2" text="Rotation" />
              <label posn="140 0" sizen="30 6" halign="center" valign="center2" text="Opacity" />
              <label posn="170 0" sizen="30 6" halign="center" valign="center2" text="Color" />
              <label posn="200 0" sizen="30 6" halign="center" valign="center2" text="Duration" />
              <label posn="235 0" sizen="30 6" halign="center" valign="center2" text="Easing" />
            </frame>
            <frame posn="0 5">
              <frame posn="2 0" scale="0.8">
                <label posn="4 0" sizen="5 6" halign="center" valign="center2" text="X :" />
                <label posn="22 0" sizen="5 6" halign="center" valign="center2" text="Y :" />
                <entry posn="12 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="0.0" id="Entry_TargetPosX" />
                <entry posn="30 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="0.0" id="Entry_TargetPosY" />
              </frame>
              <frame posn="32 0" scale="0.8">
                <label posn="4 0" sizen="5 6" halign="center" valign="center2" text="X :" />
                <label posn="22 0" sizen="5 6" halign="center" valign="center2" text="Y :" />
                <entry posn="12 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="20.0" id="Entry_TargetSizeX" />
                <entry posn="30 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="20.0" id="Entry_TargetSizeY" />
              </frame>
              <entry posn="80 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="1.0" id="Entry_TargetScale" />
              <entry posn="110 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="0.0" id="Entry_TargetRotation" />
              <entry posn="140 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="1.0" id="Entry_TargetOpacity" />
              <entry posn="170 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="fff" id="Entry_TargetColor" />
              <entry posn="200 0" sizen="10 6" halign="center" valign="center2" focusareacolor1="7777" default="1000" id="Entry_TargetDuration" />
              <frame>
                <label posn="213 0" sizen="5 5" halign="center" valign="center2" text="In" />
                <quad posn="218 0" sizen="5 5" halign="center" valign="center" style="Icons64x64_1" substyle="Check" styleselected="0" scriptevents="1" id="Checkbox_EaseIn" />
                <quad posn="252 0" sizen="5 5" halign="center" valign="center" style="Icons64x64_1" substyle="Check" styleselected="1" scriptevents="1" id="Checkbox_EaseOut" />
                <label posn="257 0" sizen="5 5" halign="center" valign="center2" text="Out" />
                <label posn="235 0" halign="center" valign="center2" style="CardButtonSmallS" text="Linear" scriptevents="1" id="Button_SelectEasing" />
              </frame>
              <frame posn="235 8 1" hidden="1" id="Frame_SelectEasing">
                <quad posn="0 -3.5" sizen="30 67.5" halign="center" valign="bottom" bgcolor="333" />
                <label posn="0 0" halign="center" valign="center2" style="CardButtonSmallS" text="Linear" scriptevents="1" class="Button_SelectEasing" id="Linear" />
                <label posn="0 6" halign="center" valign="center2" style="CardButtonSmallS" text="Quad" scriptevents="1" class="Button_SelectEasing" id="Quad" />
                <label posn="0 12" halign="center" valign="center2" style="CardButtonSmallS" text="Cubic" scriptevents="1" class="Button_SelectEasing" id="Cubic" />
                <label posn="0 18" halign="center" valign="center2" style="CardButtonSmallS" text="Quart" scriptevents="1" class="Button_SelectEasing" id="Quart" />
                <label posn="0 24" halign="center" valign="center2" style="CardButtonSmallS" text="Quint" scriptevents="1" class="Button_SelectEasing" id="Quint" />
                <label posn="0 30" halign="center" valign="center2" style="CardButtonSmallS" text="Sine" scriptevents="1" class="Button_SelectEasing" id="Sine" />
                <label posn="0 36" halign="center" valign="center2" style="CardButtonSmallS" text="Exp" scriptevents="1" class="Button_SelectEasing" id="Exp" />
                <label posn="0 42" halign="center" valign="center2" style="CardButtonSmallS" text="Circ" scriptevents="1" class="Button_SelectEasing" id="Circ" />
                <label posn="0 48" halign="center" valign="center2" style="CardButtonSmallS" text="Back" scriptevents="1" class="Button_SelectEasing" id="Back" />
                <label posn="0 54" halign="center" valign="center2" style="CardButtonSmallS" text="Elastic" scriptevents="1" class="Button_SelectEasing" id="Elastic" />
                <label posn="0 60" halign="center" valign="center2" style="CardButtonSmallS" text="Bounce" scriptevents="1" class="Button_SelectEasing" id="Bounce" />
              </frame>
            </frame>
            <label posn="315 8" halign="right" valign="center2" style="CardButtonMediumL" text="Animate !" scriptevents="1" id="Button_Animate" />
          </frame>
        </frame>
      </frame>
    </frame>
    <frame posn="640 0" class="Section" id="Tooltip">
      <frame posn="0 -90" id="Frame_Content">
        <frame posn="0 0 -1">
          <quad sizen="320 180" halign="center" valign="center" bgcolor="227" id="Quad_BgTooltip" />
        </frame>
        <frame posn="0 0 0">
          <quad posn="0 0" sizen="10 10" halign="center" valign="center" bgcolor="fff" scriptevents="1" class="LibManialink_TooltipShow" id="Tooltip_Default" />
          <quad posn="-160 75 10" sizen="10 10" bgcolor="fff" scriptevents="1" class="LibManialink_TooltipShow" id="Tooltip_MultiLines" />
          <quad posn="-160 -90" sizen="10 10" valign="bottom" bgcolor="fff" scriptevents="1" class="LibManialink_TooltipShow" id="Tooltip_Aligned" />
          <quad posn="160 75" sizen="10 10" halign="right" bgcolor="fff" scriptevents="1" class="LibManialink_TooltipShow" id="Tooltip_Custom" />
          <frame hidden="1" class="LibManialink_Tooltip" id="Tooltip_Custom">
            <label posn="-32 0 1" sizen="70 10" valign="center2" style="TextRaceMessageBig" textsize="2" textcolor="f00" id="Tooltip_Message" />
            <quad posn="-44 0 1" sizen="10 10" valign="center" style="Icons128x128_1" substyle="United" />
            <quad sizen="90 14" halign="center" valign="center" style="Bgs1" substyle="BgList" id="Tooltip_BoundingBox" />
          </frame>
          <label posn="0 -70" halign="center" valign="bottom" text="Mouse over the quads to see the tooltips in action." />
        </frame>
      </frame>
    </frame>
    <frame posn="960 0" class="Section" id="Draggable">
      <frame posn="0 -90" id="Frame_Content">
        <frame posn="0 0 -1">
          <quad sizen="320 180" halign="center" valign="center" bgcolor="772" id="Quad_BgDraggable" />
        </frame>
        <frame posn="0 0 0">
          <quad posn="0 0 3" sizen="50 10" halign="center" bgcolor="700" scriptevents="1" class="LibManialink_Draggable LibManialink_DraggableHandle" id="Drag_1" />
          <quad posn="0 -40 3" sizen="50 10" halign="center" bgcolor="700" scriptevents="1" class="LibManialink_Draggable LibManialink_DraggableHandle" id="Drag_1" />
          <quad posn="0 -10 3" sizen="30 10" halign="center" bgcolor="000" scriptevents="1" class="LibManialink_Draggable LibManialink_DraggableBoundingBox" id="Drag_1" />
          <frame posn="0 -10 2" class="LibManialink_Draggable" id="Drag_1">
            <label posn="0 5 1" halign="center" valign="center2" text="Handle" />
            <label posn="0 -35 1" halign="center" valign="center2" text="Handle" />
            <label posn="0 -5 1" halign="center" valign="center2" text="Bounding box" />
            <label posn="0 -15 1" halign="center" valign="center2" text="Frame" />
            <quad sizen="50 30" halign="center" bgcolor="777" />
          </frame>
          <label posn="0 -70" halign="center" valign="bottom" text="Click on the handle to drag the frame. The bounding box prevent the frame to go offscreen." />
          
          <frame posn="50 20 5" class="LibManialink_Draggable" id="Drag_2">
            <quad sizen="10 40" halign="right" valign="center" bgcolor="700" scriptevents="1" class="LibManialink_DraggableHandle" id="Drag_2" />
            <quad posn="30 0" sizen="10 40" valign="center" bgcolor="700" scriptevents="1" class="LibManialink_DraggableHandle" id="Drag_2" />
            <quad posn="0 0 1" sizen="30 30" valign="center" bgcolor="000" class="LibManialink_DraggableBoundingBox" id="Drag_2" />
            <quad posn="0 0" sizen="30 40" valign="center" bgcolor="777" />
            <label posn="0 0 2" sizen="30 40" valign="center2" text="Parent box" />
            
            <frame posn="50 30 5" class="LibManialink_Draggable" id="Drag_3">
              <quad sizen="10 40" halign="right" valign="center" bgcolor="700" scriptevents="1" class="LibManialink_DraggableHandle" id="Drag_3" />
              <quad posn="30 0" sizen="10 40" valign="center" bgcolor="700" scriptevents="1" class="LibManialink_DraggableHandle" id="Drag_3" />
              <quad posn="0 0 1" sizen="30 30" valign="center" bgcolor="000" class="LibManialink_DraggableBoundingBox" id="Drag_3" />
              <quad posn="0 0" sizen="30 40" valign="center" bgcolor="777" />
              <label posn="0 0 2" sizen="30 40" valign="center2" text="Child box" />
            </frame>
          </frame>
          <frame posn="-120 20 15" class="LibManialink_Draggable" id="Drag_4">
            <quad posn="0 0 1" sizen="30 10" valign="center" bgcolor="700" scriptevents="1" class="LibManialink_DraggableHandle" id="Drag_4" />
            <quad posn="0 0" sizen="30 30" valign="center" bgcolor="000" class="LibManialink_DraggableBoundingBox" id="Drag_4" />
            <label posn="0 0 2" sizen="30 40" valign="center2" text="Constrained movements" />
          </frame>
          <quad posn="-139 59 1" sizen="68 98" bgcolor="772" class="LibManialink_DraggableArea" id="Drag_4" />
          <quad posn="-140 60" sizen="70 100" bgcolor="552" />
        </frame>
      </frame>
    </frame>
  </frame>
</frame>
<frame hidden="1" class="LibManialink_Tooltip" id="Tooltip_Default">
  <label posn="0 0 1" sizen="48 4" halign="center" valign="center2" textsize="1.5" textcolor="aaa" id="Tooltip_Message" />
  <quad sizen="50 6" halign="center" valign="center" bgcolor="000d" id="Tooltip_BoundingBox" />
</frame>
<frame hidden="1" class="LibManialink_Tooltip" id="Tooltip_MultiLines">
  <label posn="0 0 1" sizen="28 28" halign="center" valign="center2" autonewline="1" maxline="5" textsize="1.5" textcolor="aaa" id="Tooltip_Message" />
  <quad sizen="30 30" halign="center" valign="center" bgcolor="000d" id="Tooltip_BoundingBox" />
</frame>
<frame hidden="1" class="LibManialink_Tooltip" id="Tooltip_Aligned">
  <label posn="0 0 1" sizen="58 10" halign="center" valign="center2" autonewline="1" maxline="2" textsize="1.5" textcolor="aaa" id="Tooltip_Message" />
  <quad sizen="60 12" halign="center" valign="center" bgcolor="000d" id="Tooltip_BoundingBox" />
</frame>
<script><!--
// ---------------------------------- //
/// Manialink library
// ---------------------------------- //
#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Tooltip Start
// ---------------------------------- //
Void LibManialink_TooltipShow(Text _Id, CMlControl _Control, Text _Text) {
  Page.GetClassChildren("LibManialink_Tooltip", Page.MainFrame, True);
  foreach (Control in Page.GetClassChildren_Result) {
    if (Control.ControlId != _Id) continue;
    
    declare Frame_Tooltip <=> (Control as CMlFrame);
    if (Frame_Tooltip == Null) return;
    declare Tooltip_Message   <=> (Frame_Tooltip.GetFirstChild("Tooltip_Message")   as CMlLabel);
    declare Tooltip_BoundingBox <=> (Frame_Tooltip.GetFirstChild("Tooltip_BoundingBox") as CMlQuad);
    
    declare Vec3 Pos;
    Pos.X = (_Control.AbsolutePosition.X - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
    Pos.Y = (_Control.AbsolutePosition.Y - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
    Pos.Z = (_Control.AbsolutePosition.Z - Frame_Tooltip.AbsolutePosition.Z) + Frame_Tooltip.RelativePosition.Z + 1.;
    
    if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
      Pos.X -= (_Control.Size.X / 2.);
    } else if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
      Pos.X -= (_Control.Size.X);
    }
    
    if (_Control.VerticalAlign == CMlControl::AlignVertical::Top) {
      Pos.Y -= _Control.Size.Y;
    } else if (_Control.VerticalAlign == CMlControl::AlignVertical::VCenter || _Control.VerticalAlign == CMlControl::AlignVertical::VCenter2) {
      Pos.Y -= _Control.Size.Y / 2.;
    }
    
    if (Tooltip_BoundingBox != Null) {
      if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
        Pos.X += (Tooltip_BoundingBox.Size.X / 2.);
      } else if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
        Pos.X += (Tooltip_BoundingBox.Size.X);
      }
      
      if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::Bottom) {
        Pos.Y -= Tooltip_BoundingBox.Size.Y;
      } else if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::VCenter) {
        Pos.Y -= Tooltip_BoundingBox.Size.Y / 2.;
      }
    }
    
    if (Tooltip_BoundingBox != Null) {
      declare PosMax = <160., 90.>;
      declare PosMin = <-160., -90.>;
      
      if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
        PosMax.X = ((160. - Tooltip_BoundingBox.Size.X / 2.) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
        PosMin.X = ((-160. + Tooltip_BoundingBox.Size.X / 2.) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
      } else if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
        PosMin.X = ((-160. + Tooltip_BoundingBox.Size.X) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
      } else {
        PosMax.X = ((160. - Tooltip_BoundingBox.Size.X) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
      }
      
      if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::VCenter) {
        PosMax.Y = ((90. - Tooltip_BoundingBox.Size.Y / 2.) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
        PosMin.Y = ((-90. + Tooltip_BoundingBox.Size.Y / 2.) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
      } else if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::Bottom) {
        PosMax.Y = ((90. - Tooltip_BoundingBox.Size.Y) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
      } else {
        PosMin.Y = ((-90. + Tooltip_BoundingBox.Size.Y) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
      }
      
      if (Pos.X > PosMax.X) Pos.X = PosMax.X;
      if (Pos.X < PosMin.X) Pos.X = PosMin.X;
      if (Pos.Y > PosMax.Y) Pos.Y = PosMax.Y;
      if (Pos.Y < PosMin.Y) Pos.Y = PosMin.Y;
    }
      
    Frame_Tooltip.RelativePosition = Pos;
    Frame_Tooltip.Visible = True;
    if (Tooltip_Message != Null) Tooltip_Message.Value = _Text;
  }
}

Void LibManialink_TooltipHide(Text _Id) {
  Page.GetClassChildren("LibManialink_Tooltip", Page.MainFrame, True);
  foreach (Control in Page.GetClassChildren_Result) {
    if (Control.ControlId != _Id) continue;
    Control.Visible = False;
  }
}

Void LibManialink_TooltipLoop() {
  foreach (Event in PendingEvents) {
    if (Event.Type == CMlEvent::Type::MouseOver) {
      if (Event.Control.HasClass("LibManialink_TooltipShow")) {
        declare Text LibManialink_TooltipMessage for Event.Control;
        LibManialink_TooltipShow(Event.ControlId, Event.Control, LibManialink_TooltipMessage);
      }
    } else if (Event.Type == CMlEvent::Type::MouseOut) {
      if (Event.Control.HasClass("LibManialink_TooltipShow")) {
        LibManialink_TooltipHide(Event.ControlId);
      }
    }
  }
}

Void LibManialink_SetTooltipMessage(Text _Id, Text _Message) {
  Page.GetClassChildren("LibManialink_TooltipShow", Page.MainFrame, True);
  foreach (Control in Page.GetClassChildren_Result) {
    if (Control.ControlId != _Id) continue;
    declare Text LibManialink_TooltipMessage for Control;
    LibManialink_TooltipMessage = _Message;
  }
}
// ---------------------------------- //
// Tooltip Stop
// ---------------------------------- //

// ---------------------------------- //
// Draggable Start
// ---------------------------------- //
Real[] LibManialink_PrivateDraggableGetOffset(CMlControl _Control) {
  declare Offset = [0., 0., 0., 0.];
  if (_Control == Null) return Offset;
          
  if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
    Offset[0] -= _Control.Size.X / 2.;
    Offset[1] += _Control.Size.X / 2.;
  } else if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
    Offset[0] -= _Control.Size.X;
  } else {
    Offset[1] += _Control.Size.X;
  }
  
  if (_Control.VerticalAlign == CMlControl::AlignVertical::VCenter) {
    Offset[2] -= _Control.Size.Y / 2.;
    Offset[3] += _Control.Size.Y / 2.;
  } else if (_Control.VerticalAlign == CMlControl::AlignVertical::Bottom) {
    Offset[3] += _Control.Size.Y;
  } else {
    Offset[2] -= _Control.Size.Y;
  }
  
  return Offset;
}

Void LibManialink_DraggableLoop() {
  declare Boolean LibManialink_DragMouseLeftButton for Page;
  declare Boolean LibManialink_IsDragging for Page;
  declare Text LibManialink_Draggable for Page;
  declare CMlControl[Integer] LibManialink_Dragging for Page;
  declare Real[] LibManialink_DragLimit for Page;
  declare CMlControl LibManialink_DragBoundingBox for Page;
  declare Real[] LibManialink_DragBoundingBoxOffset for Page;
  
  if (LibManialink_DragMouseLeftButton != MouseLeftButton) {
    LibManialink_DragMouseLeftButton = MouseLeftButton;
    
    if (MouseLeftButton && LibManialink_Draggable != "") {
      LibManialink_IsDragging = True;
      LibManialink_Dragging.clear();
      LibManialink_DragLimit = [-160., 160., -90., 90.];
      LibManialink_DragBoundingBox = Null;
      
      Page.GetClassChildren("LibManialink_Draggable", Page.MainFrame, True);
      foreach (Key => Control in Page.GetClassChildren_Result) {
        if (Control.ControlId == LibManialink_Draggable) {
          declare Vec2 LibManialink_DragOffset for Control;
          LibManialink_DragOffset = <Control.RelativePosition.X - MouseX, Control.RelativePosition.Y - MouseY>;
          LibManialink_Dragging[Key] = Control;
        }
      }
      
      Page.GetClassChildren("LibManialink_DraggableArea", Page.MainFrame, True);
      foreach (Control in Page.GetClassChildren_Result) {
        if (Control.ControlId == LibManialink_Draggable) {
          LibManialink_DragLimit = [Control.AbsolutePosition.X, Control.AbsolutePosition.X, Control.AbsolutePosition.Y, Control.AbsolutePosition.Y];
          declare Offset = LibManialink_PrivateDraggableGetOffset(Control);
          
          for (I, 0, 3) {
            LibManialink_DragLimit[I] += Offset[I];
          }
          
          break;
        }
      }
      
      Page.GetClassChildren("LibManialink_DraggableBoundingBox", Page.MainFrame, True);
      foreach (Control in Page.GetClassChildren_Result) {
        if (Control.ControlId == LibManialink_Draggable) {
          LibManialink_DragBoundingBox = Control;
          LibManialink_DragBoundingBoxOffset = LibManialink_PrivateDraggableGetOffset(Control);
          
          break;
        }
      }
    } else {
      LibManialink_IsDragging = False;
      LibManialink_Dragging.clear();
    }
  }
  
  foreach (Event in PendingEvents) {
    if (Event.Type == CMlEvent::Type::MouseOver) {
      if (Event.Control.HasClass("LibManialink_DraggableHandle")) {
        LibManialink_Draggable = Event.ControlId;
      } else {
        LibManialink_Draggable = "";
      }
    } else if (Event.Type == CMlEvent::Type::MouseOut) {
      LibManialink_Draggable = "";
    }
  }
  
  if (LibManialink_IsDragging && LibManialink_Dragging.count > 0) {
    foreach (Control in LibManialink_Dragging) {
      declare Vec2 LibManialink_DragOffset for Control;
      Control.RelativePosition.X = MouseX + LibManialink_DragOffset.X;
      Control.RelativePosition.Y = MouseY + LibManialink_DragOffset.Y;
    }
    
    if (LibManialink_DragBoundingBox != Null) {
      declare Box = [
        LibManialink_DragBoundingBox.AbsolutePosition.X + LibManialink_DragBoundingBoxOffset[0],
        LibManialink_DragBoundingBox.AbsolutePosition.X + LibManialink_DragBoundingBoxOffset[1],
        LibManialink_DragBoundingBox.AbsolutePosition.Y + LibManialink_DragBoundingBoxOffset[2],
        LibManialink_DragBoundingBox.AbsolutePosition.Y + LibManialink_DragBoundingBoxOffset[3]
      ];
      declare Shift = <0., 0.>;
      if (Box[0] < LibManialink_DragLimit[0]) Shift.X += LibManialink_DragLimit[0] - Box[0];
      if (Box[1] > LibManialink_DragLimit[1]) Shift.X += LibManialink_DragLimit[1] - Box[1];
      if (Box[2] < LibManialink_DragLimit[2]) Shift.Y += LibManialink_DragLimit[2] - Box[2];
      if (Box[3] > LibManialink_DragLimit[3]) Shift.Y += LibManialink_DragLimit[3] - Box[3];
      
      foreach (Control in LibManialink_Dragging) {
        Control.RelativePosition.X += Shift.X;
        Control.RelativePosition.Y += Shift.Y;
      }
    }
  }
}
// ---------------------------------- //
// Draggable Stop
// ---------------------------------- //

// ---------------------------------- //
// Animations Start
// ---------------------------------- //
Void LibManialink_AnimRepeatStart(Integer _RepeatTime, Integer _RepeatNb) {
  declare Boolean LibManialink_IsRepeating for Page;
  declare Integer LibManialink_RepeatTime for Page;
  declare Integer LibManialink_RepeatNb for Page;
  LibManialink_IsRepeating = True;
  LibManialink_RepeatTime = _RepeatTime;
  LibManialink_RepeatNb = _RepeatNb;
}

Void LibManialink_AnimRepeatStart(Integer _RepeatTime) {
  LibManialink_AnimRepeatStart(_RepeatTime, -1);
}

Void LibManialink_AnimRepeatEnd() {
  declare Boolean LibManialink_IsRepeating for Page;
  LibManialink_IsRepeating = False;
}

Boolean LibManialink_IsAnimated(CMlControl _Control) {
  declare CMlControl[] LibManialink_Anims for Page;
  return LibManialink_Anims.exists(_Control);
}

Boolean LibManialink_IsAnimated(Text _ControlId) {
  declare Control <=> Page.GetFirstChild(_ControlId);
  if (Control == Null) return False;
  
  declare CMlControl[] LibManialink_Anims for Page;
  return LibManialink_Anims.exists(Control);
}

Void LibManialink_AnimStop(CMlControl _Control, Integer _AnimId) {
  declare Integer[Integer] LibManialink_AnimQueue for _Control;
  
  declare Integer[Integer]  LibManialink_AnimStarTime   for _Control;
  declare Integer[Integer]  LibManialink_AnimDuration   for _Control;
  declare Integer[Integer]  LibManialink_AnimEndTime    for _Control;
  declare Text[Integer]   LibManialink_AnimEasing     for _Control;
  declare Text[Integer]   LibManialink_Visibility     for _Control;
  declare Boolean[Integer]  LibManialink_AnimRunning    for _Control;
  declare Integer[Integer]  LibManialink_AnimStyle      for _Control;
  declare Boolean[][Integer]  LibManialink_AnimActive     for _Control;
  declare Integer[Integer]  LibManialink_AnimReapeatTime  for _Control;
  declare Integer[Integer]  LibManialink_AnimReapeatNb    for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimStart_Position for _Control;
  declare Vec2[Integer]   LibManialink_AnimStart_Size   for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Scale  for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Rotation for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Opacity  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_Colorize for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_BgColor  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_TextColor for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Ratio  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_GaugeColor for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimEnd_Position for _Control;
  declare Vec2[Integer]   LibManialink_AnimEnd_Size   for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Scale    for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Rotation for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Opacity  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_Colorize for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_BgColor  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_TextColor  for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Ratio    for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_GaugeColor for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimDiff_Position  for _Control;
  declare Vec2[Integer]   LibManialink_AnimDiff_Size    for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Scale   for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Rotation  for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Opacity for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_Colorize  for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_BgColor for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_TextColor for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Ratio   for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_GaugeColor for _Control;
  
  if (_AnimId < 0) {
    LibManialink_AnimQueue.clear();
    
    LibManialink_AnimStarTime.clear();
    LibManialink_AnimDuration.clear();
    LibManialink_AnimEndTime.clear();
    LibManialink_AnimEasing.clear();
    LibManialink_Visibility.clear();
    LibManialink_AnimRunning.clear();
    LibManialink_AnimStyle.clear();
    LibManialink_AnimActive.clear();
    LibManialink_AnimReapeatNb.clear();
    LibManialink_AnimReapeatTime.clear();
    
    LibManialink_AnimStart_Position.clear();
    LibManialink_AnimStart_Size.clear();
    LibManialink_AnimStart_Scale.clear();
    LibManialink_AnimStart_Rotation.clear();
    LibManialink_AnimStart_Opacity.clear();
    LibManialink_AnimStart_Colorize.clear();
    LibManialink_AnimStart_BgColor.clear();
    LibManialink_AnimStart_TextColor.clear();
    LibManialink_AnimStart_Ratio.clear();
    LibManialink_AnimStart_GaugeColor.clear();
    
    LibManialink_AnimEnd_Position.clear();
    LibManialink_AnimEnd_Size.clear();
    LibManialink_AnimEnd_Scale.clear();
    LibManialink_AnimEnd_Rotation.clear();
    LibManialink_AnimEnd_Opacity.clear();
    LibManialink_AnimEnd_Colorize.clear();
    LibManialink_AnimEnd_BgColor.clear();
    LibManialink_AnimEnd_TextColor.clear();
    LibManialink_AnimEnd_Ratio.clear();
    LibManialink_AnimEnd_GaugeColor.clear();
    
    LibManialink_AnimDiff_Position.clear();
    LibManialink_AnimDiff_Size.clear();
    LibManialink_AnimDiff_Scale.clear();
    LibManialink_AnimDiff_Rotation.clear();
    LibManialink_AnimDiff_Opacity.clear();
    LibManialink_AnimDiff_Colorize.clear();
    LibManialink_AnimDiff_BgColor.clear();
    LibManialink_AnimDiff_TextColor.clear();
    LibManialink_AnimDiff_Ratio.clear();
    LibManialink_AnimDiff_GaugeColor.clear();
  
    declare CMlControl[] LibManialink_Anims for Page;
    declare Removed = LibManialink_Anims.remove(_Control);
  } else {
    declare Removed = LibManialink_AnimQueue.removekey(_AnimId);
    
    Removed = LibManialink_AnimStarTime.removekey(_AnimId);
    Removed = LibManialink_AnimDuration.removekey(_AnimId);
    Removed = LibManialink_AnimEndTime.removekey(_AnimId);
    Removed = LibManialink_AnimEasing.removekey(_AnimId);
    Removed = LibManialink_Visibility.removekey(_AnimId);
    Removed = LibManialink_AnimRunning.removekey(_AnimId);
    Removed = LibManialink_AnimStyle.removekey(_AnimId);
    Removed = LibManialink_AnimActive.removekey(_AnimId);
    Removed = LibManialink_AnimReapeatNb.removekey(_AnimId);
    Removed = LibManialink_AnimReapeatTime.removekey(_AnimId);
    
    Removed = LibManialink_AnimStart_Position.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Size.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Scale.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Rotation.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Opacity.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Colorize.removekey(_AnimId);
    Removed = LibManialink_AnimStart_BgColor.removekey(_AnimId);
    Removed = LibManialink_AnimStart_TextColor.removekey(_AnimId);
    Removed = LibManialink_AnimStart_Ratio.removekey(_AnimId);
    Removed = LibManialink_AnimStart_GaugeColor.removekey(_AnimId);
    
    Removed = LibManialink_AnimEnd_Position.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Size.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Scale.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Rotation.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Opacity.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Colorize.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_BgColor.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_TextColor.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_Ratio.removekey(_AnimId);
    Removed = LibManialink_AnimEnd_GaugeColor.removekey(_AnimId);
    
    Removed = LibManialink_AnimDiff_Position.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Size.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Scale.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Rotation.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Opacity.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Colorize.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_BgColor.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_TextColor.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_Ratio.removekey(_AnimId);
    Removed = LibManialink_AnimDiff_GaugeColor.removekey(_AnimId);
  }
}

Void LibManialink_AnimStop(CMlControl _Control) {
  LibManialink_AnimStop(_Control, -1);
}

Void LibManialink_AnimStop(Text _ControlId) {
  LibManialink_AnimStop(Page.GetFirstChild(_ControlId), -1);
}

Void LibManialink_Private_AnimComputeDiff(CMlControl _Control, Integer _AnimId) {
  declare Boolean[][Integer]  LibManialink_AnimActive     for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimStart_Position for _Control;
  declare Vec2[Integer]   LibManialink_AnimStart_Size   for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Scale  for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Rotation for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Opacity  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_Colorize for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_BgColor  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_TextColor for _Control;
  declare Real[Integer]   LibManialink_AnimStart_Ratio  for _Control;
  declare Vec3[Integer]   LibManialink_AnimStart_GaugeColor for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimEnd_Position for _Control;
  declare Vec2[Integer]   LibManialink_AnimEnd_Size   for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Scale    for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Rotation for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Opacity  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_Colorize for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_BgColor  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_TextColor  for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Ratio    for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_GaugeColor for _Control;
  
  declare Vec3[Integer]   LibManialink_AnimDiff_Position  for _Control;
  declare Vec2[Integer]   LibManialink_AnimDiff_Size    for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Scale   for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Rotation  for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Opacity for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_Colorize  for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_BgColor for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_TextColor for _Control;
  declare Real[Integer]   LibManialink_AnimDiff_Ratio   for _Control;
  declare Vec3[Integer]   LibManialink_AnimDiff_GaugeColor for _Control;
  
  LibManialink_AnimStart_Position[_AnimId]  = _Control.RelativePosition;
  LibManialink_AnimStart_Size[_AnimId]    = _Control.Size;
  LibManialink_AnimStart_Scale[_AnimId]   = _Control.RelativeScale;
  LibManialink_AnimStart_Rotation[_AnimId]  = _Control.RelativeRotation;
  LibManialink_AnimStart_Opacity[_AnimId]   = 0.;
  LibManialink_AnimStart_Colorize[_AnimId]  = <0., 0., 0.>;
  LibManialink_AnimStart_BgColor[_AnimId]   = <0., 0., 0.>;
  LibManialink_AnimStart_TextColor[_AnimId] = <0., 0., 0.>;
  LibManialink_AnimStart_Ratio[_AnimId]   = 0.;
  LibManialink_AnimStart_GaugeColor[_AnimId]  = <0., 0., 0.>;
  if (_Control is CMlQuad) {
    declare Quad <=> (_Control as CMlQuad);
    LibManialink_AnimStart_Opacity[_AnimId]   = Quad.Opacity;
    LibManialink_AnimStart_Colorize[_AnimId]  = Quad.Colorize;
    LibManialink_AnimStart_BgColor[_AnimId]   = Quad.BgColor;
  } else if (_Control is CMlLabel) {
    declare Label <=> (_Control as CMlLabel);
    LibManialink_AnimStart_Opacity[_AnimId]   = Label.Opacity;
    LibManialink_AnimStart_TextColor[_AnimId] = Label.TextColor;
  } else if (_Control is CMlGauge) {
    declare Gauge <=> (_Control as CMlGauge);
    LibManialink_AnimStart_Ratio[_AnimId]   = Gauge.Ratio;
    LibManialink_AnimStart_GaugeColor[_AnimId]  = Gauge.Color;
  }
  
  LibManialink_AnimDiff_Position[_AnimId]   = <0., 0., 0.>;
  LibManialink_AnimDiff_Size[_AnimId]     = <0., 0.>;
  LibManialink_AnimDiff_Scale[_AnimId]    = 0.;
  LibManialink_AnimDiff_Rotation[_AnimId]   = 0.;
  LibManialink_AnimDiff_Opacity[_AnimId]    = 0.;
  LibManialink_AnimDiff_Colorize[_AnimId]   = <0., 0., 0.>;
  LibManialink_AnimDiff_BgColor[_AnimId]    = <0., 0., 0.>;
  LibManialink_AnimDiff_TextColor[_AnimId]  = <0., 0., 0.>;
  LibManialink_AnimDiff_Ratio[_AnimId]    = 0.;
  LibManialink_AnimDiff_GaugeColor[_AnimId] = <0., 0., 0.>;
  
  if (LibManialink_AnimActive[_AnimId][0]) {
    LibManialink_AnimDiff_Position[_AnimId] = LibManialink_AnimEnd_Position[_AnimId] - LibManialink_AnimStart_Position[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][1]) {
    LibManialink_AnimDiff_Size[_AnimId] = LibManialink_AnimEnd_Size[_AnimId] - LibManialink_AnimStart_Size[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][2]) {
    LibManialink_AnimDiff_Scale[_AnimId]  = LibManialink_AnimEnd_Scale[_AnimId] - LibManialink_AnimStart_Scale[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][3]) {
    LibManialink_AnimDiff_Rotation[_AnimId] = LibManialink_AnimEnd_Rotation[_AnimId] - LibManialink_AnimStart_Rotation[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][4]) {
    LibManialink_AnimDiff_Opacity[_AnimId] = LibManialink_AnimEnd_Opacity[_AnimId] - LibManialink_AnimStart_Opacity[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][5]) {
    LibManialink_AnimDiff_Colorize[_AnimId] = LibManialink_AnimEnd_Colorize[_AnimId] - LibManialink_AnimStart_Colorize[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][6]) {
    LibManialink_AnimDiff_BgColor[_AnimId] = LibManialink_AnimEnd_BgColor[_AnimId] - LibManialink_AnimStart_BgColor[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][7]) {
    LibManialink_AnimDiff_TextColor[_AnimId] = LibManialink_AnimEnd_TextColor[_AnimId] - LibManialink_AnimStart_TextColor[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][8]) {
    LibManialink_AnimDiff_Ratio[_AnimId] = LibManialink_AnimEnd_Ratio[_AnimId] - LibManialink_AnimStart_Ratio[_AnimId];
  }
  if (LibManialink_AnimActive[_AnimId][9]) {
    LibManialink_AnimDiff_GaugeColor[_AnimId] = LibManialink_AnimEnd_GaugeColor[_AnimId] - LibManialink_AnimStart_GaugeColor[_AnimId];
  }
}

Void LibManialink_Private_AnimTargetProperties(
  CMlControl _Control,
  Integer _AnimId,
  Vec3 _Position,
  Vec2 _Size,
  Real _Scale,
  Real _Rotation,
  Real _Opacity,
  Vec3 _Colorize,
  Vec3 _BgColor,
  Vec3 _TextColor,
  Real _Ratio,
  Vec3 _GaugeColor
) {
  declare Vec3[Integer]   LibManialink_AnimEnd_Position for _Control;
  declare Vec2[Integer]   LibManialink_AnimEnd_Size   for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Scale    for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Rotation for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Opacity  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_Colorize for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_BgColor  for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_TextColor  for _Control;
  declare Real[Integer]   LibManialink_AnimEnd_Ratio    for _Control;
  declare Vec3[Integer]   LibManialink_AnimEnd_GaugeColor for _Control;
  
  LibManialink_AnimEnd_Position[_AnimId]  = _Position;
  LibManialink_AnimEnd_Size[_AnimId]    = _Size;
  LibManialink_AnimEnd_Scale[_AnimId]   = _Scale;
  LibManialink_AnimEnd_Rotation[_AnimId]  = _Rotation;
  LibManialink_AnimEnd_Opacity[_AnimId] = _Opacity;
  LibManialink_AnimEnd_Colorize[_AnimId]  = _Colorize;
  LibManialink_AnimEnd_BgColor[_AnimId] = _BgColor;
  LibManialink_AnimEnd_TextColor[_AnimId] = _TextColor;
  LibManialink_AnimEnd_Ratio[_AnimId]   = _Ratio;
  LibManialink_AnimEnd_GaugeColor[_AnimId]= _GaugeColor;
}

Void LibManialink_Private_Anim(
  CMlControl _Control,
  Boolean[] _Active,
  Vec3 _Position,
  Vec2 _Size,
  Real _Scale,
  Real _Rotation,
  Real _Opacity,
  Vec3 _Colorize,
  Vec3 _BgColor,
  Vec3 _TextColor,
  Real _Ratio,
  Vec3 _GaugeColor,
  Integer _StartTime,
  Integer _Duration,
  Text _Easing,
  Text _Visibility,
  Integer _Style
) { 
  declare Integer[Integer] LibManialink_AnimQueue for _Control;
  
  declare Integer[Integer]  LibManialink_AnimStarTime   for _Control;
  declare Integer[Integer]  LibManialink_AnimDuration   for _Control;
  declare Integer[Integer]  LibManialink_AnimEndTime    for _Control;
  declare Text[Integer]   LibManialink_AnimEasing     for _Control;
  declare Text[Integer]   LibManialink_Visibility     for _Control;
  declare Boolean[Integer]  LibManialink_AnimRunning    for _Control;
  declare Integer[Integer]  LibManialink_AnimStyle      for _Control;
  declare Boolean[][Integer]  LibManialink_AnimActive     for _Control;
  declare Integer[Integer]  LibManialink_AnimReapeatNb    for _Control;
  declare Integer[Integer]  LibManialink_AnimReapeatTime  for _Control;
  
  declare AnimStartTime = 0;
  declare AnimId = 0;
  
  // Anim
  if (_Style < 0) {
    LibManialink_AnimStop(_Control);
    AnimStartTime = Now;
  } 
  // Anim chain
  else if (_Style == 0) {
    declare AnimEndTime = Now;
    foreach (Id => StartTime in LibManialink_AnimQueue) {
      AnimEndTime = LibManialink_AnimEndTime[Id];
      if (AnimEndTime > AnimStartTime) AnimStartTime = AnimEndTime;
    }
  } 
  // Anim Insert
  else {
    AnimStartTime = Now + _StartTime;
  }
  
  LibManialink_AnimQueue = LibManialink_AnimQueue.sortkey();
  foreach (Id => StartTime in LibManialink_AnimQueue) {
    if (AnimId != Id) break;
    AnimId += 1;
  }
  
  declare Boolean LibManialink_IsRepeating for Page;
  declare Integer LibManialink_RepeatTime for Page;
  declare Integer LibManialink_RepeatNb for Page;
  declare Repeat = 1;
  if (LibManialink_IsRepeating) Repeat = LibManialink_RepeatNb;
  
  LibManialink_AnimQueue[AnimId] = AnimStartTime;
  
  LibManialink_AnimStarTime[AnimId] = AnimStartTime;
  LibManialink_AnimDuration[AnimId] = _Duration;
  LibManialink_AnimEndTime[AnimId]  = LibManialink_AnimStarTime[AnimId] + LibManialink_AnimDuration[AnimId];
  LibManialink_AnimEasing[AnimId]   = _Easing;
  LibManialink_Visibility[AnimId]   = _Visibility;
  LibManialink_AnimRunning[AnimId]  = False;
  LibManialink_AnimStyle[AnimId]    = _Style;
  LibManialink_AnimActive[AnimId]   = _Active;
  LibManialink_AnimReapeatNb[AnimId]  = Repeat;
  LibManialink_AnimReapeatTime[AnimId]= LibManialink_RepeatTime;
  
  LibManialink_Private_AnimTargetProperties(
    _Control, AnimId, _Position, _Size, _Scale, _Rotation, _Opacity, _Colorize, _BgColor, _TextColor, _Ratio, _GaugeColor
  );
  LibManialink_Private_AnimComputeDiff(_Control, AnimId);
  
  declare CMlControl[] LibManialink_Anims for Page;
  declare CopyControl = _Control;
  if (!LibManialink_Anims.exists(_Control)) LibManialink_Anims.add(CopyControl);
}

Void LibManialink_Private_Anim(CMlControl _Control, Text _TargetXml, Integer _StartTime, Integer _Duration, Text _Easing, Integer _Style) {
  declare CMlControl Control;
  if (_Control != Null) {
    Control <=> _Control;
  }
  
  declare XmlDoc = Xml.Create(_TargetXml);
  if (XmlDoc == Null) {
    log(Now^"> Library Manialink > XML argument not valid");
    return;
  }
  
  if (Control == Null) {
    declare ControlId = XmlDoc.Root.GetAttributeText("id", "");
    if (ControlId == "") return;
    Control <=> Page.GetFirstChild(ControlId);
  }
  
  if (Control == Null) return;
  
  declare Active    = [False, False, False, False, False, False, False, False, False, False];
  declare Vec3 Position;
  declare Vec2 Size;
  declare Real Scale;
  declare Real Rotation;
  declare Real Opacity;
  declare Vec3 Colorize;
  declare Vec3 BgColor;
  declare Vec3 TextColor;
  declare Real Ratio;
  declare Vec3 GaugeColor;
  declare Text Visibility;
  
  declare XmlPosition = XmlDoc.Root.GetAttributeText("posn", "");
  if (XmlPosition != "") {
    declare PositionSplit = TL::Split(" ", XmlPosition);
    if (PositionSplit.existskey(0)) Position.X = TL::ToReal(PositionSplit[0]);
    if (PositionSplit.existskey(1)) Position.Y = TL::ToReal(PositionSplit[1]);
    if (PositionSplit.existskey(2)) Position.Z = TL::ToReal(PositionSplit[2]);
    Active[0] = True;
  }
  
  declare XmlSize = XmlDoc.Root.GetAttributeText("sizen", "");
  if (XmlSize != "") {
    declare SizeSplit = TL::Split(" ", XmlSize);
    if (SizeSplit.existskey(0)) Size.X = TL::ToReal(SizeSplit[0]);
    if (SizeSplit.existskey(1)) Size.Y = TL::ToReal(SizeSplit[1]);
    Active[1] = True;
  }
  
  declare XmlScale = XmlDoc.Root.GetAttributeText("scale", "");
  if (XmlScale != "") {
    Scale = TL::ToReal(XmlScale);
    Active[2] = True;
  }
  
  declare XmlRotation = XmlDoc.Root.GetAttributeText("rot", "");
  if (XmlRotation != "") {
    Rotation = TL::ToReal(XmlRotation);
    Active[3] = True;
  }
  
  declare XmlOpacity = XmlDoc.Root.GetAttributeText("opacity", "");
  if (XmlOpacity != "") {
    Opacity = TL::ToReal(XmlOpacity);
    Active[4] = True;
  }
  
  declare XmlColorize = XmlDoc.Root.GetAttributeText("colorize", "");
  if (XmlColorize != "") {
    Colorize = TL::ToColor(XmlColorize);
    Active[5] = True;
  }
  
  declare XmlBgColor = XmlDoc.Root.GetAttributeText("bgcolor", "");
  if (XmlBgColor != "") {
    BgColor = TL::ToColor(XmlBgColor);
    Active[6] = True;
  }
  
  declare XmlTextColor = XmlDoc.Root.GetAttributeText("textcolor", "");
  if (XmlTextColor != "") {
    TextColor = TL::ToColor(XmlTextColor);
    Active[7] = True;
  }
  
  declare XmlRatio = XmlDoc.Root.GetAttributeText("ratio", "");
  if (XmlRatio != "") {
    Ratio = TL::ToReal(XmlRatio);
    Active[8] = True;
  }
  
  declare XmlGaugeColor = XmlDoc.Root.GetAttributeText("color", "");
  if (XmlGaugeColor != "") {
    GaugeColor = TL::ToColor(XmlGaugeColor);
    Active[9] = True;
  }
  
  if (Visibility == "") {
    declare XmlVisibility = XmlDoc.Root.GetAttributeText("hidden", "");
    if (XmlVisibility != "") {
      if (XmlVisibility == "true" || XmlVisibility == "1") Visibility = "Hide";
      else Visibility = "Show";
    }
  }
  
  LibManialink_Private_Anim(Control, Active, Position, Size, Scale, Rotation, Opacity, Colorize, BgColor, TextColor, Ratio, GaugeColor, _StartTime, _Duration, _Easing, Visibility, _Style);
}

Void LibManialink_Anim(CMlControl _Control, Text _TargetXml, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(_Control, _TargetXml, -1, _Duration, _Easing, -1);
}

Void LibManialink_AnimChain(CMlControl _Control, Text _TargetXml, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(_Control, _TargetXml, -1, _Duration, _Easing, 0);
}

Void LibManialink_AnimInsert(CMlControl _Control, Text _TargetXml, Integer _StartTime, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(_Control, _TargetXml, _StartTime, _Duration, _Easing, 1);
}

Void LibManialink_Anim(Text _TargetXml, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(Null, _TargetXml, -1, _Duration, _Easing, -1);
}

Void LibManialink_AnimChain(Text _TargetXml, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(Null, _TargetXml, -1, _Duration, _Easing, 0);
}

Void LibManialink_AnimInsert(Text _TargetXml, Integer _StartTime, Integer _Duration, Text _Easing) {
  LibManialink_Private_Anim(Null, _TargetXml, _StartTime, _Duration, _Easing, 1);
}

// ---------------------------------- //
// Easing and Tweens Start
// ---------------------------------- //

Real LibManialink_EaseLinear(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return (_C * X) + _B;
}

Real LibManialink_EaseInQuad(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return _C * X * X + _B;
}

Real LibManialink_EaseOutQuad(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return -_C * X * (X-2.) + _B;
}

Real LibManialink_EaseInOutQuad(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = X - 1.;
  if (X < 1.) return _C / 2. * X * X + _B;
  return -_C / 2. * (Y * (Y - 2.) - 1.) + _B;
}

Real LibManialink_EaseInCubic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return _C * X * X * X + _B;
}

Real LibManialink_EaseOutCubic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.) - 1.;
  return _C * (X * X * X + 1.) + _B;
}

Real LibManialink_EaseInOutCubic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = X - 2.;
  if (X < 1.) return _C / 2. * X * X * X + _B;
  return _C / 2. * (Y * Y * Y + 2.) + _B;
}

Real LibManialink_EaseInQuart(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return _C * X * X * X * X + _B;
}

Real LibManialink_EaseOutQuart(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.) - 1.;
  return -_C * (X * X * X * X - 1.) + _B;
}

Real LibManialink_EaseInOutQuart(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = X - 2.;
  if (X < 1.) return _C / 2. * X * X * X * X + _B;
  return -_C / 2. * (Y * Y * Y * Y - 2.) + _B;
}

Real LibManialink_EaseInQuint(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return _C * X * X * X * X * X + _B;
}

Real LibManialink_EaseOutQuint(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.) - 1.;
  return _C * (X * X * X * X * X + 1.) + _B;
}

Real LibManialink_EaseInOutQuint(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = X - 2.;
  if (X < 1.) return _C / 2. * X * X * X * X * X + _B;
  return _C / 2. * (Y * Y * Y * Y * Y + 2.) + _B;
}

Real LibManialink_EaseInSine(Integer _T, Real _B, Real _C, Integer _D) {
  return -_C * ML::Cos(_T / (_D*1.) * (ML::PI() / 2.)) + _C + _B;
}

Real LibManialink_EaseOutSine(Integer _T, Real _B, Real _C, Integer _D) {
  return _C * ML::Sin(_T / (_D*1.) * (ML::PI() / 2.)) + _B;
}

Real LibManialink_EaseInOutSine(Integer _T, Real _B, Real _C, Integer _D) {
  return -_C / 2. * (ML::Cos(ML::PI() * _T / (_D*1.)) - 1.) + _B;
}

Real LibManialink_EaseInExp(Integer _T, Real _B, Real _C, Integer _D) {
  if (_T == 0) return _B;
  return _C * ML::Pow(2., 10. * (_T / (_D*1.) - 1.)) + _B;
}

Real LibManialink_EaseOutExp(Integer _T, Real _B, Real _C, Integer _D) {
  if (_T == _D) return _B + _C;
  return _C * (-ML::Pow(2., -10. * _T / (_D*1.)) + 1.) + _B;
}

Real LibManialink_EaseInOutExp(Integer _T, Real _B, Real _C, Integer _D) {
  if (_T == 0) return _B;
  if (_T == _D) return _B + _C;
  declare X = _T / (_D / 2.);
  declare Y = X - 1.;
  if (X < 1.) return _C / 2. * ML::Pow(2., 10. * (X - 1.)) + _B;
  return _C / 2. * (-ML::Pow(2., -10. * Y) + 2.) + _B;
}

Real LibManialink_EaseInCirc(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return -_C * (ML::Sqrt(1 - X * X) - 1.) + _B;
}

Real LibManialink_EaseOutCirc(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.) - 1.;
  return _C * ML::Sqrt(1 - X * X) + _B;
}

Real LibManialink_EaseInOutCirc(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = X - 2.;
  if (X < 1.) return -_C / 2. * (ML::Sqrt(1 - X * X) - 1.) + _B;
  return _C / 2. * (ML::Sqrt(1 - Y * Y) + 1.) + _B;
}

Real LibManialink_EaseInBack(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  return _C * X * X * ((1.70158 + 1.) * X - 1.70158) + _B;
}

Real LibManialink_EaseOutBack(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.) - 1.;
  return _C * (X * X * ((1.70158 + 1.) * X + 1.70158) + 1.) + _B;
}

Real LibManialink_EaseInOutBack(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = 1.70158 * 1.525;
  declare Z = X - 2.;
  if (X < 1.) return _C / 2. * (X * X * ((Y + 1.) * X - Y)) + _B;
  return _C / 2. * (Z * Z * ((Y + 1.) * Z + Y) + 2.) + _B;
}

Real LibManialink_EaseInElastic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  declare Y = _D * 0.3;
  declare Z = 1.70158;
  declare W = X - 1.;
  if (_T == 0) return _B;
  if (X == 1) return _B + _C;
  if (_C < ML::Abs(_C)) Z = Y / 4.;
  else Z = Y / (2 * ML::PI()) * ML::Asin(1.);
  return -(_C * ML::Pow(2., 10. * W) * ML::Sin((W * _D - Z)*(2.*ML::PI()) / Y)) + _B;
}

Real LibManialink_EaseOutElastic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  declare Y = _D * 0.3;
  declare Z = 1.70158;
  if (_T == 0) return _B;
  if (X == 1.) return _B + _C;
  if (_C < ML::Abs(_C)) Z = Y / 4.;
  else Z = Y / (2. * ML::PI()) * ML::Asin(1.);
  return _C * ML::Pow(2., -10. * X) * ML::Sin((X * _D - Z)*(2.*ML::PI()) / Y) + _C + _B;
}

Real LibManialink_EaseInOutElastic(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D / 2.);
  declare Y = _D * (0.3 * 1.5);
  declare Z = 1.70158;
  declare W = X - 1.;
  if (_T == 0) return _B;
  if (X == 2.) return _B + _C;
  if (_C < ML::Abs(_C)) Z = Y / 4.;
  else Z = Y / (2. * ML::PI()) * ML::Asin(1.);
  if (X < 1.) return -0.5 * (_C * ML::Pow(2., 10. * W) * ML::Sin((W * _D - Z)*(2.*ML::PI()) / Y)) + _B;
  return _C * ML::Pow(2., -10. * W) * ML::Sin((W * _D - Z)*(2.*ML::PI()) / Y) * 0.5 + _C + _B;
}

Real LibManialink_EaseInBounce(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = (_D - _T) / (_D*1.);
  
  if (X < (1 / 2.75)) {
    return _C - (_C * (7.5625 * X * X)) + _B;
  } else if (X < (2. / 2.75)) {
    declare Y = X - (1.5/2.75);
    return _C - (_C * (7.5625 * Y * Y + 0.75)) + _B;
  } else if (X < (2.5 / 2.75)) {
    declare Y = X - (2.25/2.75);
    return _C - (_C * (7.5625 * Y * Y + 0.9375)) + _B;
  }
  declare Y = X - (2.625/2.75);
  return _C - (_C * (7.5625 * Y * Y + 0.984375)) + _B;
}

Real LibManialink_EaseOutBounce(Integer _T, Real _B, Real _C, Integer _D) {
  declare X = _T / (_D*1.);
  
  if (X < (1 / 2.75)) {
    return _C * (7.5625 * X * X) + _B;
  } else if (X < (2. / 2.75)) {
    declare Y = X - (1.5/2.75);
    return _C * (7.5625 * Y * Y + 0.75) + _B;
  } else if (X < (2.5 / 2.75)) {
    declare Y = X - (2.25/2.75);
    return _C * (7.5625 * Y * Y + 0.9375) + _B;
  }
  declare Y = X - (2.625/2.75);
  return _C * (7.5625 * Y * Y + 0.984375) + _B;
}

Real LibManialink_EaseInOutBounce(Integer _T, Real _B, Real _C, Integer _D) {
  if (_T < _D / 2.) {
    declare X = (_D - (_T * 2.)) / (_D*1.);
  
    if (X < (1. / 2.75)) {
      return (_C - (_C * (7.5625 * X * X))) * 0.5 + _B;
    } else if (X < (2. / 2.75)) {
      declare Y = X - (1.5/2.75);
      return (_C - (_C * (7.5625 * Y * Y + 0.75))) * 0.5 + _B;
    } else if (X < (2.5 / 2.75)) {
      declare Y = X - (2.25/2.75);
      return (_C - (_C * (7.5625 * Y * Y + 0.9375))) * 0.5 + _B;
    }
    declare Y = X - (2.625/2.75);
    return (_C - (_C * (7.5625 * Y * Y + 0.984375))) * 0.5 + _B;
  }
  
  declare X = (_T * 2. - _D) / (_D*1.);
  
  if (X < (1. / 2.75)) {
    return (_C * (7.5625 * X * X)) * 0.5 + _C * 0.5 + _B;
  } else if (X < (2. / 2.75)) {
    declare Y = X - (1.5/2.75);
    return (_C * (7.5625 * Y * Y + 0.75)) * 0.5 + _C * 0.5 + _B;
  } else if (X < (2.5 / 2.75)) {
    declare Y = X - (2.25/2.75);
    return (_C * (7.5625 * Y * Y + 0.9375)) * 0.5 + _C * 0.5 + _B;
  }
  declare Y = X - (2.625/2.75);
  return (_C * (7.5625 * Y * Y + 0.984375)) * 0.5 + _C * 0.5 + _B;
}

Real LibManialink_Tween(Integer _CurrentTime, Real _StartValue, Real _DiffValue, Integer _Duration, Text _Easing) {
  switch (_Easing) {
    
    case "EaseLinear" : return LibManialink_EaseLinear(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInQuad" : return LibManialink_EaseInQuad(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutQuad" : return LibManialink_EaseOutQuad(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutQuad" : return LibManialink_EaseInOutQuad(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInCubic" : return LibManialink_EaseInCubic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutCubic" : return LibManialink_EaseOutCubic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutCubic" : return LibManialink_EaseInOutCubic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInQuart" : return LibManialink_EaseInQuart(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutQuart" : return LibManialink_EaseOutQuart(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutQuart" : return LibManialink_EaseInOutQuart(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInQuint" : return LibManialink_EaseInQuint(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutQuint" : return LibManialink_EaseOutQuint(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutQuint" : return LibManialink_EaseInOutQuint(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInSine" : return LibManialink_EaseInSine(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutSine" : return LibManialink_EaseOutSine(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutSine" : return LibManialink_EaseInOutSine(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInExp" : return LibManialink_EaseInExp(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutExp" : return LibManialink_EaseOutExp(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutExp" : return LibManialink_EaseInOutExp(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInCirc" : return LibManialink_EaseInCirc(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutCirc" : return LibManialink_EaseOutCirc(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutCirc" : return LibManialink_EaseInOutCirc(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInBack" : return LibManialink_EaseInBack(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutBack" : return LibManialink_EaseOutBack(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutBack" : return LibManialink_EaseInOutBack(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInElastic" : return LibManialink_EaseInElastic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutElastic" : return LibManialink_EaseOutElastic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutElastic" : return LibManialink_EaseInOutElastic(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInBounce" : return LibManialink_EaseInBounce(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseOutBounce" : return LibManialink_EaseOutBounce(_CurrentTime, _StartValue, _DiffValue, _Duration);
    case "EaseInOutBounce" : return LibManialink_EaseInOutBounce(_CurrentTime, _StartValue, _DiffValue, _Duration);
    default: return LibManialink_EaseLinear(_CurrentTime, _StartValue, _DiffValue, _Duration);
  }
  return _StartValue;
}

// ---------------------------------- //
// Easings and Tweens Stop
// ---------------------------------- //

Void LibManialink_AnimLoop() {
  declare CMlControl[] LibManialink_Anims for Page;
  declare CMlControl[] ControlsToRemove;
  
  foreach (Control in LibManialink_Anims) {
    declare Integer[Integer] LibManialink_AnimQueue for Control;
  
    declare Integer[Integer]  LibManialink_AnimStarTime for Control;
    declare Integer[Integer]  LibManialink_AnimDuration for Control;
    declare Integer[Integer]  LibManialink_AnimEndTime  for Control;
    declare Text[Integer]   LibManialink_AnimEasing   for Control;
    declare Text[Integer]   LibManialink_Visibility   for Control;
    declare Boolean[Integer]  LibManialink_AnimRunning  for Control;
    declare Integer[Integer]  LibManialink_AnimStyle    for Control;
    declare Integer[Integer]  LibManialink_AnimReapeatTime  for Control;
    declare Integer[Integer]  LibManialink_AnimReapeatNb    for Control;
    
    declare Vec3[Integer] LibManialink_AnimStart_Position for Control;
    declare Vec2[Integer] LibManialink_AnimStart_Size   for Control;
    declare Real[Integer] LibManialink_AnimStart_Scale  for Control;
    declare Real[Integer] LibManialink_AnimStart_Rotation for Control;
    declare Real[Integer] LibManialink_AnimStart_Opacity  for Control;
    declare Vec3[Integer] LibManialink_AnimStart_Colorize for Control;
    declare Vec3[Integer] LibManialink_AnimStart_BgColor  for Control;
    declare Vec3[Integer] LibManialink_AnimStart_TextColor for Control;
    declare Real[Integer] LibManialink_AnimStart_Ratio  for Control;
    declare Vec3[Integer] LibManialink_AnimStart_GaugeColor for Control;
    
    declare Vec3[Integer] LibManialink_AnimDiff_Position  for Control;
    declare Vec2[Integer] LibManialink_AnimDiff_Size    for Control;
    declare Real[Integer] LibManialink_AnimDiff_Scale   for Control;
    declare Real[Integer] LibManialink_AnimDiff_Rotation  for Control;
    declare Real[Integer] LibManialink_AnimDiff_Opacity for Control;
    declare Vec3[Integer] LibManialink_AnimDiff_Colorize  for Control;
    declare Vec3[Integer] LibManialink_AnimDiff_BgColor for Control;
    declare Vec3[Integer] LibManialink_AnimDiff_TextColor for Control;
    declare Real[Integer] LibManialink_AnimDiff_Ratio   for Control;
    declare Vec3[Integer] LibManialink_AnimDiff_GaugeColor for Control;
    
    declare Integer[] AnimsToRemove;
    declare Integer[] AnimsToRepeat;
    
    foreach (AnimId => AnimStartTime in LibManialink_AnimQueue) {
      if (AnimStartTime > Now) continue;
      
      if (!LibManialink_AnimRunning[AnimId]) {
        LibManialink_AnimRunning[AnimId] = True;
        if (LibManialink_Visibility[AnimId] == "Show") {
          Control.Visible = True;
        }
        
        // LibManialink_AnimStyle
        // -1 -> Start new anim
        // 0  -> Chain anim
        // 1  -> Insert anim
        if (LibManialink_AnimStyle[AnimId] != -1) {
          LibManialink_Private_AnimComputeDiff(Control, AnimId);
        }
      }
      
      if (!LibManialink_AnimQueue.existskey(AnimId)) continue;
      
      declare AnimationCurrentTime = Now - LibManialink_AnimStarTime[AnimId];
      if (AnimationCurrentTime > LibManialink_AnimDuration[AnimId]) AnimationCurrentTime = LibManialink_AnimDuration[AnimId];
      
      // Position
      if (LibManialink_AnimDiff_Position[AnimId].X != 0.) Control.RelativePosition.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Position[AnimId].X, LibManialink_AnimDiff_Position[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      if (LibManialink_AnimDiff_Position[AnimId].Y != 0.) Control.RelativePosition.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Position[AnimId].Y, LibManialink_AnimDiff_Position[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      if (LibManialink_AnimDiff_Position[AnimId].Z != 0.) Control.RelativePosition.Z = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Position[AnimId].Z, LibManialink_AnimDiff_Position[AnimId].Z, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      
      // Size
      if (LibManialink_AnimDiff_Size[AnimId].X != 0.) Control.Size.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Size[AnimId].X, LibManialink_AnimDiff_Size[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      if (LibManialink_AnimDiff_Size[AnimId].Y != 0.) Control.Size.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Size[AnimId].Y, LibManialink_AnimDiff_Size[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      
      // Scale
      if (LibManialink_AnimDiff_Scale[AnimId] != 0.) Control.RelativeScale = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Scale[AnimId], LibManialink_AnimDiff_Scale[AnimId], LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      
      // Rotation
      if (LibManialink_AnimDiff_Rotation[AnimId] != 0.) Control.RelativeRotation = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Rotation[AnimId], LibManialink_AnimDiff_Rotation[AnimId], LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
      
      if (Control is CMlQuad) {
        declare Quad <=> (Control as CMlQuad);
        
        // Opacity
        if (LibManialink_AnimDiff_Opacity[AnimId] != 0.) Quad.Opacity = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Opacity[AnimId], LibManialink_AnimDiff_Opacity[AnimId], LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
        
        // Colorize
        declare NewColorize = Quad.Colorize;
        declare UpdateColorize = False;
        if (LibManialink_AnimDiff_Colorize[AnimId].X != 0.) {
          NewColorize.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Colorize[AnimId].X, LibManialink_AnimDiff_Colorize[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewColorize.X > 1.) NewColorize.X = 1.;
          else if (NewColorize.X < 0.) NewColorize.X = 0.;
          UpdateColorize = True;
        }
        if (LibManialink_AnimDiff_Colorize[AnimId].Y != 0.) {
          NewColorize.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Colorize[AnimId].Y, LibManialink_AnimDiff_Colorize[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewColorize.Y > 1.) NewColorize.Y = 1.;
          else if (NewColorize.Y < 0.) NewColorize.Y = 0.;
          UpdateColorize = True;
        }
        if (LibManialink_AnimDiff_Colorize[AnimId].Z != 0.) {
          NewColorize.Z = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Colorize[AnimId].Z, LibManialink_AnimDiff_Colorize[AnimId].Z, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewColorize.Z > 1.) NewColorize.Z = 1.;
          else if (NewColorize.Z < 0.) NewColorize.Z = 0.;
          UpdateColorize = True;
        }
        if (UpdateColorize) Quad.Colorize = NewColorize;
        
        // BgColor
        declare NewBgColor = Quad.BgColor;
        declare UpdateColor = False;
        if (LibManialink_AnimDiff_BgColor[AnimId].X != 0.) {
          NewBgColor.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_BgColor[AnimId].X, LibManialink_AnimDiff_BgColor[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewBgColor.X > 1.) NewBgColor.X = 1.;
          else if (NewBgColor.X < 0.) NewBgColor.X = 0.;
          UpdateColor = True;
        }
        if (LibManialink_AnimDiff_BgColor[AnimId].Y != 0.) {
          NewBgColor.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_BgColor[AnimId].Y, LibManialink_AnimDiff_BgColor[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewBgColor.Y > 1.) NewBgColor.Y = 1.;
          else if (NewBgColor.Y < 0.) NewBgColor.Y = 0.;
          UpdateColor = True;
        }
        if (LibManialink_AnimDiff_BgColor[AnimId].Z != 0.) {
          NewBgColor.Z = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_BgColor[AnimId].Z, LibManialink_AnimDiff_BgColor[AnimId].Z, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewBgColor.Z > 1.) NewBgColor.Z = 1.;
          else if (NewBgColor.Z < 0.) NewBgColor.Z = 0.;
          UpdateColor = True;
        }
        if (UpdateColor) Quad.BgColor = NewBgColor;
      }
      
      if (Control is CMlLabel) {
        declare Label <=> (Control as CMlLabel);
        
        // Opacity
        if (LibManialink_AnimDiff_Opacity[AnimId] != 0.) Label.Opacity = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Opacity[AnimId], LibManialink_AnimDiff_Opacity[AnimId], LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
        
        // TextColor
        declare NewTextColor = Label.TextColor;
        declare UpdateTextColor = False;
        if (LibManialink_AnimDiff_TextColor[AnimId].X != 0.) {
          NewTextColor.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_TextColor[AnimId].X, LibManialink_AnimDiff_TextColor[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewTextColor.X > 1.) NewTextColor.X = 1.;
          else if (NewTextColor.X < 0.) NewTextColor.X = 0.;
          UpdateTextColor = True;
        }
        if (LibManialink_AnimDiff_TextColor[AnimId].Y != 0.) {
          NewTextColor.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_TextColor[AnimId].Y, LibManialink_AnimDiff_TextColor[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewTextColor.Y > 1.) NewTextColor.Y = 1.;
          else if (NewTextColor.Y < 0.) NewTextColor.Y = 0.;
          UpdateTextColor = True;
        }
        if (LibManialink_AnimDiff_TextColor[AnimId].Z != 0.) {
          NewTextColor.Z = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_TextColor[AnimId].Z, LibManialink_AnimDiff_TextColor[AnimId].Z, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewTextColor.Z > 1.) NewTextColor.Z = 1.;
          else if (NewTextColor.Z < 0.) NewTextColor.Z = 0.;
          UpdateTextColor = True;
        }
        if (UpdateTextColor) Label.TextColor = NewTextColor;
      }
      
      if (Control is CMlGauge) {
        declare Gauge <=> (Control as CMlGauge);
        
        // Ratio
        declare NewRatio = Gauge.Ratio;
        if (LibManialink_AnimDiff_Ratio[AnimId] != 0.) NewRatio = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_Ratio[AnimId], LibManialink_AnimDiff_Ratio[AnimId], LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
        if (NewRatio > 1.) NewRatio = 1.;
        else if (NewRatio < 0.) NewRatio = 0.;
        Gauge.Ratio = NewRatio;
        
        // GaugeColor
        declare NewGaugeColor = Gauge.Color;
        declare UpdateGaugeColor = False;
        if (LibManialink_AnimDiff_GaugeColor[AnimId].X != 0.) {
          NewGaugeColor.X = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_GaugeColor[AnimId].X, LibManialink_AnimDiff_GaugeColor[AnimId].X, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewGaugeColor.X > 1.) NewGaugeColor.X = 1.;
          else if (NewGaugeColor.X < 0.) NewGaugeColor.X = 0.;
          UpdateGaugeColor = True;
        }
        if (LibManialink_AnimDiff_GaugeColor[AnimId].Y != 0.) {
          NewGaugeColor.Y = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_GaugeColor[AnimId].Y, LibManialink_AnimDiff_GaugeColor[AnimId].Y, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewGaugeColor.Y > 1.) NewGaugeColor.Y = 1.;
          else if (NewGaugeColor.Y < 0.) NewGaugeColor.Y = 0.;
          UpdateGaugeColor = True;
        }
        if (LibManialink_AnimDiff_GaugeColor[AnimId].Z != 0.) {
          NewGaugeColor.Z = LibManialink_Tween(AnimationCurrentTime, LibManialink_AnimStart_GaugeColor[AnimId].Z, LibManialink_AnimDiff_GaugeColor[AnimId].Z, LibManialink_AnimDuration[AnimId], LibManialink_AnimEasing[AnimId]);
          if (NewGaugeColor.Z > 1.) NewGaugeColor.Z = 1.;
          else if (NewGaugeColor.Z < 0.) NewGaugeColor.Z = 0.;
          UpdateGaugeColor = True;
        }
        if (UpdateGaugeColor)Gauge.Color = NewGaugeColor;
      }
      
      if (Now >= LibManialink_AnimEndTime[AnimId]) {
        if (LibManialink_AnimReapeatNb[AnimId] > 1 || LibManialink_AnimReapeatNb[AnimId] < 0) {
          if (LibManialink_AnimReapeatNb[AnimId] > 0) LibManialink_AnimReapeatNb[AnimId] -= 1;
          AnimsToRepeat.add(AnimId);
        } else {
          AnimsToRemove.add(AnimId);
        }
        
        LibManialink_AnimRunning[AnimId] = False;
        if (LibManialink_Visibility[AnimId] == "Hide") {
          Control.Visible = False;
        }
      }
    }
    
    foreach (AnimId in AnimsToRemove) {
      LibManialink_AnimStop(Control, AnimId);
    }
    
    foreach (AnimId in AnimsToRepeat) {
      LibManialink_AnimStarTime[AnimId] += LibManialink_AnimReapeatTime[AnimId];
      LibManialink_AnimEndTime[AnimId]  = LibManialink_AnimStarTime[AnimId] + LibManialink_AnimDuration[AnimId];
      LibManialink_AnimStyle[AnimId]    = 0;
      LibManialink_AnimQueue[AnimId]    = LibManialink_AnimStarTime[AnimId];
    }
    
    if (LibManialink_AnimQueue.count <= 0) {
      ControlsToRemove.add(Control);
    }
  }
  
  foreach (Control in ControlsToRemove) {
    declare Removed = LibManialink_Anims.remove(Control);
  }
}

// ---------------------------------- //
// Animations Stop
// ---------------------------------- //

// ---------------------------------- //
// Demo manialink script
// ---------------------------------- //
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Animated;
declare CMlFrame[Text] Frames_Section;
declare Text G_CurrentSection;

Text ToColor(Integer[] _Color) {
  declare Color = "";
  for (I, 0, 2) {
    if (!_Color.existskey(I)) {
      Color ^= "0";
      continue;
    }
    if (_Color[I] >= 0 && _Color[I] <= 9) {
      Color ^= TL::ToText(_Color[I]);
    } else {
      switch (_Color[I]) {
        case 10: Color ^= "a";
        case 11: Color ^= "b";
        case 12: Color ^= "c";
        case 13: Color ^= "d";
        case 14: Color ^= "e";
        case 15: Color ^= "f";
        default: Color ^= "f";
      }
    }
  }
  return Color;
}

Text ToEasing(Integer _Int) {
  switch(_Int) {
    case 1  : return "Quad";
    case 2  : return "Cubic";
    case 3  : return "Quart";
    case 4  : return "Quint";
    case 5  : return "Sine";
    case 6  : return "Exp";
    case 7  : return "Circ";
    case 8  : return "Back";
    case 9  : return "Elastic";
    case 10 : return "Bounce";
  }
  
  return "Linear";
}

Boolean ToBoolean(Integer _Int) {
  if (_Int == 0) return False;
  return True;
}

Void AnimateDemoQuad() {
  declare Frame_AnimationControls <=> (Page.GetFirstChild("Frame_AnimationControls")        as CMlFrame);
  declare Entry_TargetPosX    <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetPosX")    as CMlEntry);
  declare Entry_TargetPosY    <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetPosY")    as CMlEntry);
  declare Entry_TargetSizeX   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetSizeX")   as CMlEntry);
  declare Entry_TargetSizeY   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetSizeY")   as CMlEntry);
  declare Entry_TargetScale   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetScale")   as CMlEntry);
  declare Entry_TargetRotation  <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetRotation")  as CMlEntry);
  declare Entry_TargetOpacity   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetOpacity") as CMlEntry);
  declare Entry_TargetColor   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetColor")   as CMlEntry);
  declare Entry_TargetDuration  <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetDuration")  as CMlEntry);
  declare Button_SelectEasing   <=> (Frame_AnimationControls.GetFirstChild("Button_SelectEasing") as CMlLabel);
  declare Checkbox_EaseIn     <=> (Frame_AnimationControls.GetFirstChild("Checkbox_EaseIn")   as CMlQuad);
  declare Checkbox_EaseOut    <=> (Frame_AnimationControls.GetFirstChild("Checkbox_EaseOut")    as CMlQuad);
  
  declare TargetPos   = TL::ToReal(Entry_TargetPosX.Value)^" "^TL::ToReal(Entry_TargetPosY.Value);
  declare TargetSize    = TL::ToReal(Entry_TargetSizeX.Value)^" "^TL::ToReal(Entry_TargetSizeY.Value);
  declare TargetScale   = TL::ToReal(Entry_TargetScale.Value);
  declare TargetRotation  = TL::ToReal(Entry_TargetRotation.Value);
  declare TargetOpacity = TL::ToReal(Entry_TargetOpacity.Value);
  declare TargetColor   = TL::StripFormatting(TL::Trim(Entry_TargetColor.Value));
  
  declare TargetXML = """<frame posn="{{{TargetPos}}}" sizen="{{{TargetSize}}}" scale="{{{TargetScale}}}" rot="{{{TargetRotation}}}" opacity="{{{TargetOpacity}}}" bgcolor="{{{TargetColor}}}" id="Quad_DemoAnimation" />""";
  declare TargetDuration = TL::ToInteger(Entry_TargetDuration.Value);
  declare TargetEasing = "Ease";
  if (Checkbox_EaseIn.StyleSelected) TargetEasing ^= "In";
  if (Checkbox_EaseOut.StyleSelected) TargetEasing ^= "Out";
  TargetEasing ^= Button_SelectEasing.Value;
  
  LibManialink_Anim(TargetXML, TargetDuration, TargetEasing);
}

Void AnimateDemoQuadRandom(Vec2 _TargetPos) {
  declare Frame_AnimationControls <=> (Page.GetFirstChild("Frame_AnimationControls")        as CMlFrame);
  declare Entry_TargetPosX    <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetPosX")    as CMlEntry);
  declare Entry_TargetPosY    <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetPosY")    as CMlEntry);
  declare Entry_TargetSizeX   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetSizeX")   as CMlEntry);
  declare Entry_TargetSizeY   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetSizeY")   as CMlEntry);
  declare Entry_TargetScale   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetScale")   as CMlEntry);
  declare Entry_TargetRotation  <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetRotation")  as CMlEntry);
  declare Entry_TargetOpacity   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetOpacity") as CMlEntry);
  declare Entry_TargetColor   <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetColor")   as CMlEntry);
  declare Entry_TargetDuration  <=> (Frame_AnimationControls.GetFirstChild("Entry_TargetDuration")  as CMlEntry);
  declare Button_SelectEasing   <=> (Frame_AnimationControls.GetFirstChild("Button_SelectEasing") as CMlLabel);
  declare Checkbox_EaseIn     <=> (Frame_AnimationControls.GetFirstChild("Checkbox_EaseIn")   as CMlQuad);
  declare Checkbox_EaseOut    <=> (Frame_AnimationControls.GetFirstChild("Checkbox_EaseOut")    as CMlQuad);
  
  Entry_TargetPosX.Value      = TL::ToText(_TargetPos.X);
  Entry_TargetPosY.Value      = TL::ToText(_TargetPos.Y);
  Entry_TargetSizeX.Value     = TL::ToText(ML::Rand(10., 100.));
  Entry_TargetSizeY.Value     = TL::ToText(ML::Rand(10., 100.));
  Entry_TargetScale.Value     = TL::ToText(ML::Rand(0.5, 2.));
  Entry_TargetRotation.Value    = TL::ToText(ML::Rand(-180., 180.));
  Entry_TargetOpacity.Value   = TL::ToText(ML::Rand(0.75, 1.));
  Entry_TargetColor.Value     = ToColor([ML::Rand(0, 15), ML::Rand(0, 15), ML::Rand(0, 15)]);
  Entry_TargetDuration.Value    = TL::ToText(ML::Rand(500, 2000));
  Button_SelectEasing.Value   = ToEasing(ML::Rand(0, 10));
  Checkbox_EaseIn.StyleSelected = ToBoolean(ML::Rand(0, 1));
  if (!Checkbox_EaseIn.StyleSelected) Checkbox_EaseOut.StyleSelected = True;
  else Checkbox_EaseOut.StyleSelected = ToBoolean(ML::Rand(0, 1));
  
  yield;
  
  AnimateDemoQuad();
}

Void SelectEasing(Text _Easing) {
  declare Frame_SelectEasing  <=> (Page.GetFirstChild("Frame_SelectEasing") as CMlFrame);
  declare Button_SelectEasing <=> (Page.GetFirstChild("Button_SelectEasing")  as CMlLabel);
  Frame_SelectEasing.Visible = False;
  Button_SelectEasing.Value = _Easing;
}

Void SelectEasing() {
  declare Frame_SelectEasing <=> (Page.GetFirstChild("Frame_SelectEasing") as CMlFrame);
  Frame_SelectEasing.Visible = !Frame_SelectEasing.Visible;
}

Void Navigate(Text _Section) {
  if (!Frames_Section.existskey(_Section)) return;
  
  G_CurrentSection = _Section;
  
  declare TargetPosX = -Frames_Section[_Section].RelativePosition.X;
  declare TargetXML = """<frame posn="{{{TargetPosX}}} 0 0" id="Frame_Animated" />""";
  LibManialink_Anim(TargetXML, 500, "EaseOutSine");
}

Void Click() {
  if (G_CurrentSection == "Animations") {
    AnimateDemoQuadRandom(<MouseX, MouseY>);
  }
}

Void Menu(Text _ControlId, Boolean _Over) {
  declare TargetColor = "";
  declare TargerId = "Quad_Bg"^_ControlId;
  
  if (_Over) {
    switch (_ControlId) {
      case "Home"     : TargetColor = "922";
      case "Animations" : TargetColor = "292";
      case "Tooltip"    : TargetColor = "229";
      case "Draggable"  : TargetColor = "992";
    }
  } else {
    switch (_ControlId) {
      case "Home"     : TargetColor = "722";
      case "Animations" : TargetColor = "272";
      case "Tooltip"    : TargetColor = "227";
      case "Draggable"  : TargetColor = "772";
    }
  }
  
  declare TargetXML = """<quad bgcolor="{{{TargetColor}}}" id="{{{TargerId}}}" />""";
  LibManialink_Anim(TargetXML, 250, "");
}

main() {
  Frame_Global  <=> (Page.GetFirstChild("Frame_Global") as CMlFrame);
  Frame_Animated  <=> (Page.GetFirstChild("Frame_Animated") as CMlFrame);
  
  Page.GetClassChildren("Section", Frame_Animated, False);
  foreach (Control in Page.GetClassChildren_Result) {
    Frames_Section[Control.ControlId] = (Control as CMlFrame);
  }
  
  G_CurrentSection = "Home";
  
  LibManialink_SetTooltipMessage("Tooltip_Default", "This is the default tooltip.");
  LibManialink_SetTooltipMessage("Tooltip_MultiLines", "The default tooltip can have his size and lines number customized.");
  LibManialink_SetTooltipMessage("Tooltip_Aligned", "The bounding box prevent the tooltip from going outside of the screen.");
  LibManialink_SetTooltipMessage("Tooltip_Custom", "You can also create your own custom tooltip.");
  
  while (True) {
    yield;
    
    LibManialink_AnimLoop();
    LibManialink_TooltipLoop();
    LibManialink_DraggableLoop();
    
    foreach (Event in PendingEvents) {
      if (Event.Type == CMlEvent::Type::MouseClick) {
        if (Event.Control.HasClass("Button_SelectEasing")) {
          SelectEasing(Event.ControlId);
        } else if (Event.Control.HasClass("Button_Menu")) {
          Navigate(Event.ControlId);
        } else {
          switch (Event.ControlId) {
            case "Button_GetOnGitHub_Manialink" : OpenLink("https://github.com/maniaplanet/game-modes/blob/master/Manialink/Libs/Manialink.txt", CMlScript::LinkType::ExternalBrowser);
            case "Button_GetOnGitHub_GameMode"  : OpenLink("https://github.com/maniaplanet/game-modes/blob/master/Common/Scripts/Libs/Nadeo/Manialink.Script.txt", CMlScript::LinkType::ExternalBrowser);
            case "Button_Documentation" : OpenLink("http://maniaplanet.github.io/documentation/maniascript/libraries/library-manialink.html", CMlScript::LinkType::ExternalBrowser);
            case "Quad_BgAnimations"  : Click();
            case "Button_Animate"   : AnimateDemoQuad();
            case "Button_SelectEasing"  : SelectEasing();
            case "Checkbox_EaseIn"    : (Event.Control as CMlQuad).StyleSelected = !(Event.Control as CMlQuad).StyleSelected;
            case "Checkbox_EaseOut"   : (Event.Control as CMlQuad).StyleSelected = !(Event.Control as CMlQuad).StyleSelected;
          }
        }
      } else if (Event.Type == CMlEvent::Type::MouseOver) {
        if (Event.Control.HasClass("Button_Menu")) {
          Menu(Event.ControlId, True);
        }
      } else if (Event.Type == CMlEvent::Type::MouseOut) {
        if (Event.Control.HasClass("Button_Menu")) {
          Menu(Event.ControlId, False);
        }
      }
    }
  }
}
--></script>
</manialink>